!function(e){var t={};function n(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(o,s,function(t){return e[t]}.bind(null,s));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){var o=n(3);"string"==typeof o&&(o=[[e.i,o,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0};n(5)(o,s);o.locals&&(e.exports=o.locals)},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var s=(i=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),r=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(r).concat([s]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},s=0;s<this.length;s++){var r=this[s][0];null!=r&&(o[r]=!0)}for(s=0;s<e.length;s++){var i=e[s];null!=i[0]&&o[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){var o;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function s(){for(var e=[],t=0;t<arguments.length;t++){var o=arguments[t];if(o){var r=typeof o;if("string"===r||"number"===r)e.push(this&&this[o]||o);else if(Array.isArray(o))e.push(s.apply(this,o));else if("object"===r)for(var i in o)n.call(o,i)&&o[i]&&e.push(this&&this[i]||i)}}return e.join(" ")}e.exports?(s.default=s,e.exports=s):void 0===(o=function(){return s}.apply(t,[]))||(e.exports=o)}()},function(e,t,n){(t=e.exports=n(1)(!1)).i(n(4),""),t.push([e.i,":root {\n  width: 200px;\n  min-width: 350px;\n}\n\n._1Or3BQ6PavUPUwux06_1Fn {\n  width: 100%;\n}\n\n._3G2h2Fz7UkbZm3wrQPqo_K {\n  margin-bottom: 5px;\n}\n\n._3G2h2Fz7UkbZm3wrQPqo_K div {\n  margin: 5px 0;\n  font-size: 20px;\n}\n\n.LD_Ge4HNf1_JLbt7_BbN {\n  display: flex;\n  align-items: center;\n}\n\n.LD_Ge4HNf1_JLbt7_BbN ._3irU38uJWM5KkOlQfVEt3O {\n  margin-left: 10px;\n}\n\n._1DQCtxXLuupXrKeQYreYv5 {\n  border: 0;\n  background: transparent;\n  box-sizing: border-box;\n  width: 0;\n  height: 50px;\n\n  border-color: transparent transparent transparent var(--color-control);\n  transition: 100ms all ease;\n  cursor: pointer;\n\n  border-style: solid;\n  border-width: 25px 0 25px 40px;\n  filter: drop-shadow(0px 0px 4px var(--color-control));\n}\n\n._1DQCtxXLuupXrKeQYreYv5._1Ygd15sUxVRZfB3dIEg5ph {\n  border-style: double;\n  border-width: 0px 0 0px 40px;\n}\n\n._1DQCtxXLuupXrKeQYreYv5:hover {\n  border-color: transparent transparent transparent var(--color-control-hover);\n  filter: drop-shadow(--shadow-control-hover);\n}\n\n",""]),t.locals={artwork:"_1Or3BQ6PavUPUwux06_1Fn",songInfo:"_3G2h2Fz7UkbZm3wrQPqo_K",controls:"LD_Ge4HNf1_JLbt7_BbN",volume:"_3irU38uJWM5KkOlQfVEt3O",stateToggle:"_1DQCtxXLuupXrKeQYreYv5",playing:"_1Ygd15sUxVRZfB3dIEg5ph"}},function(e,t,n){(t=e.exports=n(1)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Lato);",""]),t.push([e.i,":root {\n  --color-background: #222; \n  --color-background-accent: #333;\n\n  --color-text: #eee;\n\n  --color-control: #249795;\n  --color-control-hover: #6ecaca;\n\n  --shadow-control: 0px 0px 4px var(--color-control);\n  --shadow-control-hover: 0px 0px 8px var(--color-control-hover);\n\n  --box-shadow: 1px 2px 4px #000000;\n}\n\nhtml {\n  height: 100%;\n  background-color: #111;\n\n  color: var(--color-text);\n  font-family: 'Lato', sans-serif;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\ninput[type=range] {\n  -webkit-appearance: none;\n  width: 100%;\n  background: transparent;\n}\n\ninput[type=range]:focus {\n  outline: none;\n}\n\ninput[type=range]::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 10px;\n  cursor: pointer;\n  background: var(--color-control);\n  border-radius: 5px;\n  box-shadow: 0px 0px 4px var(--color-control);\n}\n\ninput[type=range]::-webkit-slider-runnable-track:hover {\n  background: var(--color-control-hover);\n  box-shadow: var(--shadow-control-hover);\n}\n\ninput[type=range]::-webkit-slider-thumb {\n  border: 1px solid #000000;\n  height: 30px;\n  width: 15px;\n  border-radius: 5px;\n  background: var(--color-text);\n  cursor: pointer;\n  -webkit-appearance: none;\n  margin-top: -11px;\n}\n",""])},function(e,t,n){var o,s,r={},i=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===s&&(s=o.apply(this,arguments)),s}),a=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var o=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}}(),c=null,l=0,u=[],d=n(6);function h(e,t){for(var n=0;n<e.length;n++){var o=e[n],s=r[o.id];if(s){s.refs++;for(var i=0;i<s.parts.length;i++)s.parts[i](o.parts[i]);for(;i<o.parts.length;i++)s.parts.push(_(o.parts[i],t))}else{var a=[];for(i=0;i<o.parts.length;i++)a.push(_(o.parts[i],t));r[o.id]={id:o.id,refs:1,parts:a}}}}function f(e,t){for(var n=[],o={},s=0;s<e.length;s++){var r=e[s],i=t.base?r[0]+t.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};o[i]?o[i].parts.push(a):n.push(o[i]={id:i,parts:[a]})}return n}function p(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=u[u.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var s=a(e.insertAt.before,n);n.insertBefore(t,s)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function b(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var o=function(){0;return n.nc}();o&&(e.attrs.nonce=o)}return v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function _(e,t){var n,o,s,r;if(t.transform&&e.css){if(!(r="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=r}if(t.singleton){var i=l++;n=c||(c=b(t)),o=w.bind(null,n,i,!1),s=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),o=function(e,t,n){var o=n.css,s=n.sourceMap,r=void 0===t.convertToAbsoluteUrls&&s;(t.convertToAbsoluteUrls||r)&&(o=d(o));s&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */");var i=new Blob([o],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(i),a&&URL.revokeObjectURL(a)}.bind(null,n,t),s=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(t),o=function(e,t){var n=t.css,o=t.media;o&&e.setAttribute("media",o);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),s=function(){m(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else s()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return h(n,t),function(e){for(var o=[],s=0;s<n.length;s++){var i=n[s];(a=r[i.id]).refs--,o.push(a)}e&&h(f(e,t),t);for(s=0;s<o.length;s++){var a;if(0===(a=o[s]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete r[a.id]}}}};var g,y=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function w(e,t,n,o){var s=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=y(t,s);else{var r=document.createTextNode(s),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(r,i[t]):e.appendChild(r)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var s,r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(s=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(s)+")")})}},function(e,t,n){"use strict";function o(e,t,n,o){return new(n||(n=Promise))(function(s,r){function i(e){try{c(o.next(e))}catch(e){r(e)}}function a(e){try{c(o.throw(e))}catch(e){r(e)}}function c(e){e.done?s(e.value):new n(function(t){t(e.value)}).then(i,a)}c((o=o.apply(e,t||[])).next())})}function s(e,t){var n,o,s,r,i={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(s=2&r[0]?o.return:r[0]?o.throw||((s=o.return)&&s.call(o),0):o.next)&&!(s=s.call(o,r[1])).done)return s;switch(o=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return i.label++,{value:r[1],done:!1};case 5:i.label++,o=r[1],r=[0];continue;case 7:r=i.ops.pop(),i.trys.pop();continue;default:if(!(s=(s=i.trys).length>0&&s[s.length-1])&&(6===r[0]||2===r[0])){i=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){i.label=r[1];break}if(6===r[0]&&i.label<s[1]){i.label=s[1],s=r;break}if(s&&i.label<s[2]){i.label=s[2],i.ops.push(r);break}s[2]&&i.ops.pop(),i.trys.pop();continue}r=t.call(e,i)}catch(e){r=[6,e],o=0}finally{n=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}n.r(t);var r=2,i=4,a=function(){function e(e,t){this.options=t,this.commandId=1,this.commands={},this.eventListeners={},this.closeRequested=!1,this.setSocket(e)}return e.prototype.setSocket=function(e){var t=this,n=this.socket;if(this.socket=e,e.addEventListener("message",function(e){return t._handleMessage(e)}),e.addEventListener("close",function(e){return t._handleClose(e)}),n){var o=this.commands;this.commandId=1,this.commands={},Object.keys(o).forEach(function(e){var n=o[e];"eventCallback"in n&&t.subscribeEvents(n.eventCallback,n.eventType).then(function(e){n.unsubscribe=e,n.resolve()})}),this.fireEvent("ready")}},e.prototype.addEventListener=function(e,t){var n=this.eventListeners[e];n||(n=this.eventListeners[e]=[]),n.push(t)},e.prototype.removeEventListener=function(e,t){var n=this.eventListeners[e];if(n){var o=n.indexOf(t);-1!==o&&n.splice(o,1)}},e.prototype.fireEvent=function(e,t){var n=this;(this.eventListeners[e]||[]).forEach(function(e){return e(n,t)})},e.prototype.close=function(){this.closeRequested=!0,this.socket.close()},e.prototype.subscribeEvents=function(e,t){return o(this,void 0,void 0,function(){var n,r,i=this;return s(this,function(a){switch(a.label){case 0:return n=this._genCmdId(),[4,new Promise(function(a,c){r=i.commands[n]={resolve:a,reject:c,eventCallback:e,eventType:t,unsubscribe:function(){return o(i,void 0,void 0,function(){return s(this,function(e){switch(e.label){case 0:return[4,this.sendMessagePromise((t=n,{type:"unsubscribe_events",subscription:t}))];case 1:return e.sent(),delete this.commands[n],[2]}var t})})}};try{i.sendMessage(function(e){var t={type:"subscribe_events"};return e&&(t.event_type=e),t}(t),n)}catch(e){}})];case 1:return a.sent(),[2,function(){return r.unsubscribe()}]}})})},e.prototype.ping=function(){return this.sendMessagePromise({type:"ping"})},e.prototype.sendMessage=function(e,t){t||(t=this._genCmdId()),e.id=t,this.socket.send(JSON.stringify(e))},e.prototype.sendMessagePromise=function(e){var t=this;return new Promise(function(n,o){var s=t._genCmdId();t.commands[s]={resolve:n,reject:o},t.sendMessage(e,s)})},e.prototype._handleMessage=function(e){var t=JSON.parse(e.data);switch(t.type){case"event":this.commands[t.id].eventCallback(t.event);break;case"result":if(t.id in this.commands){var n=this.commands[t.id];t.success?(n.resolve(t.result),"eventCallback"in n||delete this.commands[t.id]):(n.reject(t.error),delete this.commands[t.id])}break;case"pong":this.commands[t.id].resolve(),delete this.commands[t.id]}},e.prototype._handleClose=function(e){var t=this;if(Object.keys(this.commands).forEach(function(e){var n=t.commands[e];"eventCallback"in n||n.reject({type:"result",success:!1,error:{code:3,message:"Connection lost"}})}),!this.closeRequested){this.fireEvent("disconnected");var n=Object.assign({},this.options,{setupRetry:0}),i=function(e){setTimeout(function(){return o(t,void 0,void 0,function(){var t,o;return s(this,function(s){switch(s.label){case 0:s.label=1;case 1:return s.trys.push([1,3,,4]),[4,n.createSocket(n)];case 2:return t=s.sent(),this.setSocket(t),[3,4];case 3:return(o=s.sent())===r?this.fireEvent("reconnect-error",o):i(e+1),[3,4];case 4:return[2]}})})},1e3*Math.min(e,5))};i(0)}},e.prototype._genCmdId=function(){return++this.commandId},e}(),c=function(){return location.protocol+"//"+location.host+"/"},l=function(e){return 1e3*e+Date.now()};function u(e,t,n){return o(this,void 0,void 0,function(){var o,i,a;return s(this,function(s){switch(s.label){case 0:return(o=new FormData).append("client_id",t),Object.keys(n).forEach(function(e){o.append(e,n[e])}),[4,fetch(e+"/auth/token",{method:"POST",credentials:"same-origin",body:o})];case 1:if(!(i=s.sent()).ok)throw 400===i.status||403===i.status?r:new Error("Unable to fetch tokens");return[4,i.json()];case 2:return(a=s.sent()).hassUrl=e,a.clientId=t,a.expires=l(a.expires_in),[2,a]}})})}var d=function(){function e(e,t){this.data=e,this._saveTokens=t}return Object.defineProperty(e.prototype,"wsUrl",{get:function(){return"ws"+this.data.hassUrl.substr(4)+"/api/websocket"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"accessToken",{get:function(){return this.data.access_token},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"expired",{get:function(){return Date.now()>this.data.expires},enumerable:!0,configurable:!0}),e.prototype.refreshAccessToken=function(){return o(this,void 0,void 0,function(){var e;return s(this,function(t){switch(t.label){case 0:return[4,u(this.data.hassUrl,this.data.clientId,{grant_type:"refresh_token",refresh_token:this.data.refresh_token})];case 1:return(e=t.sent()).refresh_token=this.data.refresh_token,this.data=e,this._saveTokens&&this._saveTokens(e),[2]}})})},e.prototype.revoke=function(){return o(this,void 0,void 0,function(){var e;return s(this,function(t){switch(t.label){case 0:return(e=new FormData).append("action","revoke"),e.append("token",this.data.refresh_token),[4,fetch(this.data.hassUrl+"/auth/token",{method:"POST",credentials:"same-origin",body:e})];case 1:return t.sent(),this._saveTokens&&this._saveTokens(null),[2]}})})},e}();function h(e){return void 0===e&&(e={}),o(this,void 0,void 0,function(){var t,n,o,r,a,l,h;return s(this,function(s){switch(s.label){case 0:if(!("auth_callback"in(n=function(e){for(var t={},n=location.search.substr(1).split("&"),o=0;o<n.length;o++){var s=n[o].split("="),r=decodeURIComponent(s[0]),i=s.length>1?decodeURIComponent(s[1]):void 0;t[r]=i}return t}())))return[3,4];o=JSON.parse(atob(n.state)),s.label=1;case 1:return s.trys.push([1,3,,4]),[4,u(o.hassUrl,o.clientId,{code:n.code,grant_type:"authorization_code"})];case 2:return t=s.sent(),e.saveTokens&&e.saveTokens(t),[3,4];case 3:return r=s.sent(),console.log("Unable to fetch access token",r),[3,4];case 4:return t||!e.loadTokens?[3,6]:[4,e.loadTokens()];case 5:t=s.sent(),s.label=6;case 6:if(t)return[2,new d(t,e.saveTokens)];if(void 0===(a=e.hassUrl))throw i;return"/"===a[a.length-1]&&(a=a.substr(0,a.length-1)),l=e.clientId||c(),h=e.redirectUrl||location.protocol+"//"+location.host+location.pathname+location.search,function(e,t,n,o){n+=(n.includes("?")?"&":"?")+"auth_callback=1",document.location.href=function(e,t,n,o){var s=e+"/auth/authorize?response_type=code&client_id="+encodeURIComponent(t)+"&redirect_uri="+encodeURIComponent(n);return o&&(s+="&state="+encodeURIComponent(o)),s}(e,t,n,o)}(a,l,h,function(e){return btoa(JSON.stringify(e))}({hassUrl:a,clientId:l})),[2,new Promise(function(){})]}})})}var f=function(e,t,n,o){if(e[t])return e[t];var s,r=0,i=function(e){var t=[];function n(n,o){e=o?n:Object.assign({},e,n);for(var s=t,r=0;r<s.length;r++)s[r](e)}return{get state(){return e},action:function(t){function o(e){n(e,!1)}return function(){for(var n=[e],s=0;s<arguments.length;s++)n.push(arguments[s]);var r=t.apply(this,n);if(null!=r)return r.then?r.then(o):o(r)}},setState:n,subscribe:function(e){return t.push(e),function(){!function(e){for(var n=[],o=0;o<t.length;o++)t[o]===e?e=null:n.push(t[o]);t=n}(e)}}}}(),a=function(){return n(e).then(function(e){return i.setState(e,!0)})};return e[t]={get state(){return i.state},refresh:a,subscribe:function(t){r||(r++,o&&(s=o(e,i)),e.addEventListener("ready",a),a().catch(function(t){if(e.socket.readyState==e.socket.OPEN)throw t}));var n=i.subscribe(t);return void 0!==i.state&&t(i.state),function(){n(),--r||(s&&s.then(function(e){e()}),e.removeEventListener("ready",a))}}},e[t]},p=function(e){return e.sendMessagePromise({type:"get_states"})},m=function(e,t,n,o){return e.sendMessagePromise(function(e,t,n){var o={type:"call_service",domain:e,service:t};return n&&(o.service_data=n),o}(t,n,o))};function b(e){return o(this,void 0,void 0,function(){var t,n,o,r;return s(this,function(s){switch(s.label){case 0:return[4,p(e)];case 1:for(t=s.sent(),n={},o=0;o<t.length;o++)n[(r=t[o]).entity_id]=r;return[2,n]}})})}var v=function(e,t){return e.subscribeEvents(function(e){return function(e,t){var n,o=e.state;if(void 0!==o){var s=t.data,r=s.entity_id,i=s.new_state;if(i)e.setState(((n={})[i.entity_id]=i,n));else{var a=Object.assign({},o);delete a[r],e.setState(a,!0)}}}(t,e)},"state_changed")},_=function(e,t){return function(e){return f(e,"_ent",b,v)}(e).subscribe(t)},g={setupRetry:0,createSocket:function(e){if(!e.auth)throw i;var t=e.auth,n=t.wsUrl;return new Promise(function(i,a){return function e(i,a,c){var l=this,u=new WebSocket(n),d=!1,h=function(){if(u.removeEventListener("close",h),d)c(r);else if(0!==i){var t=-1===i?-1:i-1;setTimeout(function(){return e(t,a,c)},1e3)}else c(1)},f=function(e){return o(l,void 0,void 0,function(){var e;return s(this,function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),t.expired?[4,t.refreshAccessToken()]:[3,2];case 1:n.sent(),n.label=2;case 2:return u.send(JSON.stringify({type:"auth",access_token:t.accessToken})),[3,4];case 3:return e=n.sent(),d=e===r,u.close(),[3,4];case 4:return[2]}})})},p=function(e){return o(l,void 0,void 0,function(){return s(this,function(t){switch(JSON.parse(e.data).type){case"auth_invalid":d=!0,u.close();break;case"auth_ok":u.removeEventListener("open",f),u.removeEventListener("message",p),u.removeEventListener("close",h),u.removeEventListener("error",h),a(u)}return[2]})})};u.addEventListener("open",f),u.addEventListener("message",p),u.addEventListener("close",h),u.addEventListener("error",h)}(e.setupRetry,i,a)})}};let y;const w=async(e,t)=>E(e).on(e=>"volume_set"===e,()=>m(y,"media_player",e,{entity_id:"media_player.spotify",volume_level:t.value})).on(e=>"set_media_state"===e,()=>m(y,"media_player",t.service,{entity_id:"media_player.spotify"})).otherwise(e=>{throw"invalid service call: "+e}),V=e=>p(y).then(t=>t.find(t=>t.entity_id===e)),k="volume_set",N="set_media_state",x=e=>({on:()=>x(e),otherwise:()=>e}),E=e=>({on:(t,n)=>t(e)?x(n(e)):E(e),otherwise:t=>t(e)}),O={};function A(e,t,n){let o;return"#text"===e.nodeName?o=n.document.createTextNode(e.data):"#comment"===e.nodeName?o=n.document.createComment(e.data):("svg"===e.nodeName||t?(o=n.document.createElementNS("http://www.w3.org/2000/svg",e.nodeName),t=!0):o=n.document.createElement(e.nodeName),e.attributes&&Object.entries(e.attributes).forEach(([e,t])=>o.setAttribute(e,t)),e.childNodes&&e.childNodes.forEach(e=>o.appendChild(A(e,t,n))),n.valueDiffing&&(e.value&&(o.value=e.value),e.checked&&(o.checked=e.checked),e.selected&&(o.selected=e.selected))),o}function T(e,t){for(t=t.slice();t.length>0;){if(!e.childNodes)return!1;const n=t.splice(0,1)[0];e=e.childNodes[n]}return e}function D(e,t,n){let o,s,r,i,a,c=T(e,t[n._const.route]);const l={diff:t,node:c};if(n.preDiffApply(l))return!0;switch(t[n._const.action]){case n._const.addAttribute:if(!c||!c.setAttribute)return!1;c.setAttribute(t[n._const.name],t[n._const.value]);break;case n._const.modifyAttribute:if(!c||!c.setAttribute)return!1;c.setAttribute(t[n._const.name],t[n._const.newValue]),"INPUT"===c.nodeName&&"value"===t[n._const.name]&&(c.value=t[n._const.oldValue]);break;case n._const.removeAttribute:if(!c||!c.removeAttribute)return!1;c.removeAttribute(t[n._const.name]);break;case n._const.modifyTextElement:if(!c||3!==c.nodeType)return!1;n.textDiff(c,c.data,t[n._const.oldValue],t[n._const.newValue]);break;case n._const.modifyValue:if(!c||void 0===c.value)return!1;c.value=t[n._const.newValue];break;case n._const.modifyComment:if(!c||void 0===c.data)return!1;n.textDiff(c,c.data,t[n._const.oldValue],t[n._const.newValue]);break;case n._const.modifyChecked:if(!c||void 0===c.checked)return!1;c.checked=t[n._const.newValue];break;case n._const.modifySelected:if(!c||void 0===c.selected)return!1;c.selected=t[n._const.newValue];break;case n._const.replaceElement:c.parentNode.replaceChild(A(t[n._const.newValue],"http://www.w3.org/2000/svg"===c.namespaceURI,n),c);break;case n._const.relocateGroup:(i=Array(...new Array(t.groupLength)).map(()=>c.removeChild(c.childNodes[t[n._const.from]]))).forEach((e,o)=>{0===o&&(s=c.childNodes[t[n._const.to]]),c.insertBefore(e,s||null)});break;case n._const.removeElement:c.parentNode.removeChild(c);break;case n._const.addElement:a=(r=t[n._const.route].slice()).splice(r.length-1,1)[0],(c=T(e,r)).insertBefore(A(t[n._const.element],"http://www.w3.org/2000/svg"===c.namespaceURI,n),c.childNodes[a]||null);break;case n._const.removeTextElement:if(!c||3!==c.nodeType)return!1;c.parentNode.removeChild(c);break;case n._const.addTextElement:if(a=(r=t[n._const.route].slice()).splice(r.length-1,1)[0],o=n.document.createTextNode(t[n._const.value]),!(c=T(e,r))||!c.childNodes)return!1;c.insertBefore(o,c.childNodes[a]||null);break;default:console.log("unknown action")}return l.newNode=o,n.postDiffApply(l),!0}function C(e,t,n){const o=e[t];e[t]=e[n],e[n]=o}function L(e,t,n){t.length||(t=[t]),(t=t.slice()).reverse(),t.forEach(t=>{!function(e,t,n){switch(t[n._const.action]){case n._const.addAttribute:t[n._const.action]=n._const.removeAttribute,D(e,t,n);break;case n._const.modifyAttribute:C(t,n._const.oldValue,n._const.newValue),D(e,t,n);break;case n._const.removeAttribute:t[n._const.action]=n._const.addAttribute,D(e,t,n);break;case n._const.modifyTextElement:case n._const.modifyValue:case n._const.modifyComment:case n._const.modifyChecked:case n._const.modifySelected:case n._const.replaceElement:C(t,n._const.oldValue,n._const.newValue),D(e,t,n);break;case n._const.relocateGroup:C(t,n._const.from,n._const.to),D(e,t,n);break;case n._const.removeElement:t[n._const.action]=n._const.addElement,D(e,t,n);break;case n._const.addElement:t[n._const.action]=n._const.removeElement,D(e,t,n);break;case n._const.removeTextElement:t[n._const.action]=n._const.addTextElement,D(e,t,n);break;case n._const.addTextElement:t[n._const.action]=n._const.removeTextElement,D(e,t,n);break;default:console.log("unknown action")}}(e,t,n)})}["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","bgsound","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","command","content","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","element","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","image","img","input","ins","isindex","kbd","keygen","label","legend","li","link","listing","main","map","mark","marquee","math","menu","menuitem","meta","meter","multicol","nav","nextid","nobr","noembed","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","plaintext","pre","progress","q","rb","rbc","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","slot","small","source","spacer","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr","xmp"].forEach(e=>{O[e]=((t,...n)=>{const o=document.createElement(e);return Object.keys(t).forEach(e=>{o[e]=t[e]}),Array.isArray(n)||(n=[n]),n.forEach(e=>o.appendChild(e)),o})});class U{constructor(e={}){Object.entries(e).forEach(([e,t])=>this[e]=t)}toString(){return JSON.stringify(this)}setValue(e,t){return this[e]=t,this}}function j(e){const t=[];return"#text"!==e.nodeName&&"#comment"!==e.nodeName&&(t.push(e.nodeName),e.attributes&&(e.attributes.class&&t.push(`${e.nodeName}.${e.attributes.class.replace(/ /g,".")}`),e.attributes.id&&t.push(`${e.nodeName}#${e.attributes.id}`))),t}function S(e){const t={},n={};return e.forEach(e=>{j(e).forEach(e=>{const o=e in t;o||e in n?o&&(delete t[e],n[e]=!0):t[e]=!0})}),t}function I(e,t){const n=S(e),o=S(t),s={};return Object.keys(n).forEach(e=>{o[e]&&(s[e]=!0)}),s}function M(e){return delete e.outerDone,delete e.innerDone,delete e.valueDone,!e.childNodes||e.childNodes.every(M)}function R(e,t){if(!["nodeName","value","checked","selected","data"].every(n=>e[n]===t[n]))return!1;if(Boolean(e.attributes)!==Boolean(t.attributes))return!1;if(Boolean(e.childNodes)!==Boolean(t.childNodes))return!1;if(e.attributes){const n=Object.keys(e.attributes),o=Object.keys(t.attributes);if(n.length!==o.length)return!1;if(!n.every(n=>e.attributes[n]===t.attributes[n]))return!1}if(e.childNodes){if(e.childNodes.length!==t.childNodes.length)return!1;if(!e.childNodes.every((e,n)=>R(e,t.childNodes[n])))return!1}return!0}function P(e,t,n,o,s){if(!e||!t)return!1;if(e.nodeName!==t.nodeName)return!1;if("#text"===e.nodeName)return!!s||e.data===t.data;if(e.nodeName in n)return!0;if(e.attributes&&t.attributes){if(e.attributes.id){if(e.attributes.id!==t.attributes.id)return!1;if(`${e.nodeName}#${e.attributes.id}`in n)return!0}if(e.attributes.class&&e.attributes.class===t.attributes.class){if(`${e.nodeName}.${e.attributes.class.replace(/ /g,".")}`in n)return!0}}if(o)return!0;const r=e.childNodes?e.childNodes.slice().reverse():[],i=t.childNodes?t.childNodes.slice().reverse():[];if(r.length!==i.length)return!1;if(s)return r.every((e,t)=>e.nodeName===i[t].nodeName);{const e=I(r,i);return r.every((t,n)=>P(t,i[n],e,!0,!0))}}function B(e){return JSON.parse(JSON.stringify(e))}function J(e,t,n,o){let s=0,r=[];const i=e.length,a=t.length,c=Array(...new Array(i+1)).map(()=>[]),l=I(e,t);let u=i===a;u&&e.some((e,n)=>{const o=j(e),s=j(t[n]);return o.length!==s.length?(u=!1,!0):(o.some((e,t)=>{if(e!==s[t])return u=!1,!0}),!u||void 0)});for(let d=0;d<i;d++){const i=e[d];for(let e=0;e<a;e++){const a=t[e];n[d]||o[e]||!P(i,a,l,u)?c[d+1][e+1]=0:(c[d+1][e+1]=c[d][e]?c[d][e]+1:1,c[d+1][e+1]>=s&&(s=c[d+1][e+1],r=[d+1,e+1]))}}return 0!==s&&{oldValue:r[0]-s,newValue:r[1]-s,length:s}}function G(e,t){return Array(...new Array(e)).map(()=>t)}class ${constructor(){this.list=[]}add(e){this.list.push(...e)}forEach(e){this.list.forEach(t=>e(t))}}function Q(e,t){let n,o,s=e;for(t=t.slice();t.length>0;){if(!s.childNodes)return!1;o=t.splice(0,1)[0],n=s,s=s.childNodes[o]}return{node:s,parentNode:n,nodeIndex:o}}function q(e,t,n){return t.forEach(t=>{!function(e,t,n){const o=Q(e,t[n._const.route]);let s=o.node;const r=o.parentNode,i=o.nodeIndex,a=[],c={diff:t,node:s};if(n.preDiffApply(c))return!0;let l,u,d,h;switch(t[n._const.action]){case n._const.addAttribute:s.attributes||(s.attributes={}),s.attributes[t[n._const.name]]=t[n._const.value],"checked"===t[n._const.name]?s.checked=!0:"selected"===t[n._const.name]?s.selected=!0:"INPUT"===s.nodeName&&"value"===t[n._const.name]&&(s.value=t[n._const.value]);break;case n._const.modifyAttribute:s.attributes[t[n._const.name]]=t[n._const.newValue];break;case n._const.removeAttribute:delete s.attributes[t[n._const.name]],0===Object.keys(s.attributes).length&&delete s.attributes,"checked"===t[n._const.name]?s.checked=!1:"selected"===t[n._const.name]?delete s.selected:"INPUT"===s.nodeName&&"value"===t[n._const.name]&&delete s.value;break;case n._const.modifyTextElement:s.data=t[n._const.newValue];break;case n._const.modifyValue:s.value=t[n._const.newValue];break;case n._const.modifyComment:s.data=t[n._const.newValue];break;case n._const.modifyChecked:s.checked=t[n._const.newValue];break;case n._const.modifySelected:s.selected=t[n._const.newValue];break;case n._const.replaceElement:(l=B(t[n._const.newValue])).outerDone=!0,l.innerDone=!0,l.valueDone=!0,r.childNodes[i]=l;break;case n._const.relocateGroup:(u=s.childNodes.splice(t[n._const.from],t.groupLength).reverse()).forEach(e=>s.childNodes.splice(t[n._const.to],0,e)),s.subsets&&s.subsets.forEach(e=>{if(t[n._const.from]<t[n._const.to]&&e.oldValue<=t[n._const.to]&&e.oldValue>t[n._const.from]){e.oldValue-=t.groupLength;const o=e.oldValue+e.length-t[n._const.to];o>0&&(a.push({oldValue:t[n._const.to]+t.groupLength,newValue:e.newValue+e.length-o,length:o}),e.length-=o)}else if(t[n._const.from]>t[n._const.to]&&e.oldValue>t[n._const.to]&&e.oldValue<t[n._const.from]){e.oldValue+=t.groupLength;const o=e.oldValue+e.length-t[n._const.to];o>0&&(a.push({oldValue:t[n._const.to]+t.groupLength,newValue:e.newValue+e.length-o,length:o}),e.length-=o)}else e.oldValue===t[n._const.from]&&(e.oldValue=t[n._const.to])});break;case n._const.removeElement:r.childNodes.splice(i,1),r.subsets&&r.subsets.forEach(e=>{e.oldValue>i?e.oldValue-=1:e.oldValue===i?e.delete=!0:e.oldValue<i&&e.oldValue+e.length>i&&(e.oldValue+e.length-1===i?e.length--:(a.push({newValue:e.newValue+i-e.oldValue,oldValue:i,length:e.length-i+e.oldValue-1}),e.length=i-e.oldValue))}),s=r;break;case n._const.addElement:d=t[n._const.route].slice(),h=d.splice(d.length-1,1)[0],s=Q(e,d).node,(l=B(t[n._const.element])).outerDone=!0,l.innerDone=!0,l.valueDone=!0,s.childNodes||(s.childNodes=[]),h>=s.childNodes.length?s.childNodes.push(l):s.childNodes.splice(h,0,l),s.subsets&&s.subsets.forEach(e=>{if(e.oldValue>=h)e.oldValue+=1;else if(e.oldValue<h&&e.oldValue+e.length>h){const t=e.oldValue+e.length-h;a.push({newValue:e.newValue+e.length-t,oldValue:h+1,length:t}),e.length-=t}});break;case n._const.removeTextElement:r.childNodes.splice(i,1),"TEXTAREA"===r.nodeName&&delete r.value,r.subsets&&r.subsets.forEach(e=>{e.oldValue>i?e.oldValue-=1:e.oldValue===i?e.delete=!0:e.oldValue<i&&e.oldValue+e.length>i&&(e.oldValue+e.length-1===i?e.length--:(a.push({newValue:e.newValue+i-e.oldValue,oldValue:i,length:e.length-i+e.oldValue-1}),e.length=i-e.oldValue))}),s=r;break;case n._const.addTextElement:d=t[n._const.route].slice(),h=d.splice(d.length-1,1)[0],(l={}).nodeName="#text",l.data=t[n._const.value],(s=Q(e,d).node).childNodes||(s.childNodes=[]),h>=s.childNodes.length?s.childNodes.push(l):s.childNodes.splice(h,0,l),"TEXTAREA"===s.nodeName&&(s.value=t[n._const.newValue]),s.subsets&&s.subsets.forEach(e=>{if(e.oldValue>=h&&(e.oldValue+=1),e.oldValue<h&&e.oldValue+e.length>h){const t=e.oldValue+e.length-h;a.push({newValue:e.newValue+e.length-t,oldValue:h+1,length:t}),e.length-=t}});break;default:console.log("unknown action")}s.subsets&&(s.subsets=s.subsets.filter(e=>!e.delete&&e.oldValue!==e.newValue),a.length&&(s.subsets=s.subsets.concat(a))),c.newNode=l,n.postDiffApply(c)}(e,t,n)}),!0}function F(e,t){const n={};if(n.nodeName=e.nodeName,"#text"===n.nodeName||"#comment"===n.nodeName)n.data=e.data;else{if(e.attributes&&e.attributes.length>0){n.attributes={},Array.prototype.slice.call(e.attributes).forEach(e=>n.attributes[e.name]=e.value)}if("TEXTAREA"===n.nodeName)n.value=e.value;else if(e.childNodes&&e.childNodes.length>0){n.childNodes=[],Array.prototype.slice.call(e.childNodes).forEach(e=>n.childNodes.push(F(e,t)))}t.valueDiffing&&(void 0!==e.checked&&e.type&&["radio","checkbox"].includes(e.type.toLowerCase())?n.checked=e.checked:void 0!==e.value&&(n.value=e.value),void 0!==e.selected&&(n.selected=e.selected))}return n}class X{constructor(e,t,n){this.options=n,this.t1=F(e,this.options),this.t2=F(t,this.options),this.diffcount=0,this.foundAll=!1,this.debug&&(this.t1Orig=F(e,this.options),this.t2Orig=F(t,this.options)),this.tracker=new $}init(){return this.findDiffs(this.t1,this.t2)}findDiffs(e,t){let n;do{if(this.options.debug&&(this.diffcount+=1,this.diffcount>this.options.diffcap))throw window.diffError=[this.t1Orig,this.t2Orig],new Error(`surpassed diffcap:${JSON.stringify(this.t1Orig)} -> ${JSON.stringify(this.t2Orig)}`);0===(n=this.findNextDiff(e,t,[])).length&&(R(e,t)||(this.foundAll?(console.error("Could not find remaining diffs!"),console.log({t1:e,t2:t})):(this.foundAll=!0,M(e),n=this.findNextDiff(e,t,[])))),n.length>0&&(this.foundAll=!1,this.tracker.add(n),q(e,n,this.options))}while(n.length>0);return this.tracker.list}findNextDiff(e,t,n){let o,s;if(this.options.maxDepth&&n.length>this.options.maxDepth)return[];if(!e.outerDone){if(o=this.findOuterDiff(e,t,n),this.filterOuterDiff&&(s=this.filterOuterDiff(e,t,o))&&(o=s),o.length>0)return e.outerDone=!0,o;e.outerDone=!0}if(!e.innerDone){if((o=this.findInnerDiff(e,t,n)).length>0)return o;e.innerDone=!0}if(this.options.valueDiffing&&!e.valueDone){if((o=this.findValueDiff(e,t,n)).length>0)return e.valueDone=!0,o;e.valueDone=!0}return[]}findOuterDiff(e,t,n){const o=[];let s,r,i,a,c,l;if(e.nodeName!==t.nodeName)return[(new U).setValue(this.options._const.action,this.options._const.replaceElement).setValue(this.options._const.oldValue,B(e)).setValue(this.options._const.newValue,B(t)).setValue(this.options._const.route,n)];if(n.length&&this.options.maxChildCount&&e.childNodes&&t.childNodes&&e.childNodes.length>this.options.maxChildCount&&t.childNodes.length>this.options.maxChildCount){const o=e.childNodes.length<t.childNodes.length?e.childNodes.length:t.childNodes.length;let s=0,r=0;for(;s<this.options.maxChildDiffCount&&r<o;)R(e.childNodes[r],t.childNodes[r])||s++,r++;if(s===this.options.maxChildDiffCount)return[(new U).setValue(this.options._const.action,this.options._const.replaceElement).setValue(this.options._const.oldValue,B(e)).setValue(this.options._const.newValue,B(t)).setValue(this.options._const.route,n)]}if(e.data!==t.data)return"#text"===e.nodeName?[(new U).setValue(this.options._const.action,this.options._const.modifyTextElement).setValue(this.options._const.route,n).setValue(this.options._const.oldValue,e.data).setValue(this.options._const.newValue,t.data)]:[(new U).setValue(this.options._const.action,this.options._const.modifyComment).setValue(this.options._const.route,n).setValue(this.options._const.oldValue,e.data).setValue(this.options._const.newValue,t.data)];for(r=e.attributes?Object.keys(e.attributes).sort():[],i=t.attributes?Object.keys(t.attributes).sort():[],a=r.length,l=0;l<a;l++)s=r[l],-1===(c=i.indexOf(s))?o.push((new U).setValue(this.options._const.action,this.options._const.removeAttribute).setValue(this.options._const.route,n).setValue(this.options._const.name,s).setValue(this.options._const.value,e.attributes[s])):(i.splice(c,1),e.attributes[s]!==t.attributes[s]&&o.push((new U).setValue(this.options._const.action,this.options._const.modifyAttribute).setValue(this.options._const.route,n).setValue(this.options._const.name,s).setValue(this.options._const.oldValue,e.attributes[s]).setValue(this.options._const.newValue,t.attributes[s])));for(a=i.length,l=0;l<a;l++)s=i[l],o.push((new U).setValue(this.options._const.action,this.options._const.addAttribute).setValue(this.options._const.route,n).setValue(this.options._const.name,s).setValue(this.options._const.value,t.attributes[s]));return o}findInnerDiff(e,t,n){const o=e.subsets&&e.subsetsAge--?e.subsets:e.childNodes&&t.childNodes?function(e,t){const n=e.childNodes?e.childNodes:[],o=t.childNodes?t.childNodes:[],s=G(n.length,!1),r=G(o.length,!1),i=[];let a=!0;const c=function(){return arguments[1]},l=e=>{s[a.oldValue+e]=!0,r[a.newValue+e]=!0};for(;a;)(a=J(n,o,s,r))&&(i.push(a),Array(...new Array(a.length)).map(c).forEach(e=>l(e)));return e.subsets=i,e.subsetsAge=100,i}(e,t):[],s=e.childNodes?e.childNodes:[],r=t.childNodes?t.childNodes:[];let i,a=[],c=0;if(o.length>0&&(a=this.attemptGroupRelocation(e,t,o,n)).length>0)return a;const l=Math.max(s.length,r.length);s.length!==r.length&&(i=!0);for(let e=0;e<l;e+=1){const t=s[e],o=r[e];i&&(t&&!o?"#text"===t.nodeName?(a.push((new U).setValue(this.options._const.action,this.options._const.removeTextElement).setValue(this.options._const.route,n.concat(c)).setValue(this.options._const.value,t.data)),c-=1):(a.push((new U).setValue(this.options._const.action,this.options._const.removeElement).setValue(this.options._const.route,n.concat(c)).setValue(this.options._const.element,B(t))),c-=1):o&&!t&&("#text"===o.nodeName?a.push((new U).setValue(this.options._const.action,this.options._const.addTextElement).setValue(this.options._const.route,n.concat(c)).setValue(this.options._const.value,o.data)):a.push((new U).setValue(this.options._const.action,this.options._const.addElement).setValue(this.options._const.route,n.concat(c)).setValue(this.options._const.element,B(o))))),t&&o&&(a=a.concat(this.findNextDiff(t,o,n.concat(c)))),c+=1}return e.innerDone=!0,a}attemptGroupRelocation(e,t,n,o){const s=function(e,t,n){const o=e.childNodes?G(e.childNodes.length,!0):[],s=t.childNodes?G(t.childNodes.length,!0):[];let r=0;return n.forEach(e=>{const t=e.oldValue+e.length,n=e.newValue+e.length;for(let n=e.oldValue;n<t;n+=1)o[n]=r;for(let t=e.newValue;t<n;t+=1)s[t]=r;r+=1}),{gaps1:o,gaps2:s}}(e,t,n),r=s.gaps1,i=s.gaps2;let a,c,l,u,d,h,f=Math.min(r.length,i.length);const p=[];for(let s=0,m=0;s<f;m+=1,s+=1)if(!0===r[s])if("#text"===(u=e.childNodes[m]).nodeName){if("#text"===t.childNodes[s].nodeName&&u.data!==t.childNodes[s].data){for(h=m;e.childNodes.length>h+1&&"#text"===e.childNodes[h+1].nodeName;)if(h+=1,t.childNodes[s].data===e.childNodes[h].data){d=!0;break}if(!d)return p.push((new U).setValue(this.options._const.action,this.options._const.modifyTextElement).setValue(this.options._const.route,o.concat(s)).setValue(this.options._const.oldValue,u.data).setValue(this.options._const.newValue,t.childNodes[s].data)),p}p.push((new U).setValue(this.options._const.action,this.options._const.removeTextElement).setValue(this.options._const.route,o.concat(s)).setValue(this.options._const.value,u.data)),r.splice(s,1),f=Math.min(r.length,i.length),s-=1}else p.push((new U).setValue(this.options._const.action,this.options._const.removeElement).setValue(this.options._const.route,o.concat(s)).setValue(this.options._const.element,B(u))),r.splice(s,1),f=Math.min(r.length,i.length),s-=1;else if(!0===i[s])"#text"===(u=t.childNodes[s]).nodeName?(p.push((new U).setValue(this.options._const.action,this.options._const.addTextElement).setValue(this.options._const.route,o.concat(s)).setValue(this.options._const.value,u.data)),r.splice(s,0,!0),f=Math.min(r.length,i.length),m-=1):(p.push((new U).setValue(this.options._const.action,this.options._const.addElement).setValue(this.options._const.route,o.concat(s)).setValue(this.options._const.element,B(u))),r.splice(s,0,!0),f=Math.min(r.length,i.length),m-=1);else if(r[s]!==i[s]){if(p.length>0)return p;if(l=n[r[s]],(c=Math.min(l.newValue,e.childNodes.length-l.length))!==l.oldValue){a=!1;for(let t=0;t<l.length;t+=1)P(e.childNodes[c+t],e.childNodes[l.oldValue+t],[],!1,!0)||(a=!0);if(a)return[(new U).setValue(this.options._const.action,this.options._const.relocateGroup).setValue("groupLength",l.length).setValue(this.options._const.from,l.oldValue).setValue(this.options._const.to,c).setValue(this.options._const.route,o)]}}return p}findValueDiff(e,t,n){const o=[];return e.selected!==t.selected&&o.push((new U).setValue(this.options._const.action,this.options._const.modifySelected).setValue(this.options._const.oldValue,e.selected).setValue(this.options._const.newValue,t.selected).setValue(this.options._const.route,n)),(e.value||t.value)&&e.value!==t.value&&"OPTION"!==e.nodeName&&o.push((new U).setValue(this.options._const.action,this.options._const.modifyValue).setValue(this.options._const.oldValue,e.value||"").setValue(this.options._const.newValue,t.value||"").setValue(this.options._const.route,n)),e.checked!==t.checked&&o.push((new U).setValue(this.options._const.action,this.options._const.modifyChecked).setValue(this.options._const.oldValue,e.checked).setValue(this.options._const.newValue,t.checked).setValue(this.options._const.route,n)),o}}const Y={debug:!1,diffcap:10,maxDepth:!1,maxChildCount:50,maxChildDiffCount:3,valueDiffing:!0,textDiff(e,t,n,o){e.data=o},preVirtualDiffApply(){},postVirtualDiffApply(){},preDiffApply(){},postDiffApply(){},filterOuterDiff:null,compress:!1,_const:!1,document:!(!window||!window.document)&&window.document};class z{constructor(e={}){if(this.options=e,Object.entries(Y).forEach(([e,t])=>{Object.prototype.hasOwnProperty.call(this.options,e)||(this.options[e]=t)}),!this.options._const){const e=["addAttribute","modifyAttribute","removeAttribute","modifyTextElement","relocateGroup","removeElement","addElement","removeTextElement","addTextElement","replaceElement","modifyValue","modifyChecked","modifySelected","modifyComment","action","route","oldValue","newValue","element","group","from","to","name","value","data","attributes","nodeName","childNodes","checked","selected"];this.options._const={},this.options.compress?e.forEach((e,t)=>this.options._const[e]=t):e.forEach(e=>this.options._const[e]=e)}this.DiffFinder=X}apply(e,t){return function(e,t,n){return t.every(t=>D(e,t,n))}(e,t,this.options)}undo(e,t){return L(e,t,this.options)}diff(e,t){return new this.DiffFinder(e,t,this.options).init()}}var K=n(0),H=n.n(K),Z=n(2);const W=n.n(Z).a.bind(H.a),ee=()=>{let e=t({});function t({entity_id:e,entity_picture:t,media_artist:n,media_album_name:o,media_title:s,volume_level:r,state:i}){const{div:a,span:c,img:l,input:u}=O;return a({},c({className:H.a.state}),a({className:H.a.songInfo},l({className:H.a.artwork,src:`https://biddy.duckdns.org${t}`}),a({innerHTML:n}),a({innerHTML:o}),a({innerHTML:s})),a({className:H.a.controls},a({className:W(H.a.stateToggle,{playing:"playing"===i}),onclick:async()=>{const e=await V("media_player.spotify");w(N,{service:"playing"===e.state?"media_pause":"media_play"})}}),u({className:H.a.volume,type:"range",min:"0",max:"1",step:"0.01",value:r,onchange:async e=>{const t=e.currentTarget;await w(k,{value:t.value})}})))}return(e=>_(y,t=>e(t)))(n=>{const o=n["media_player.spotify"].attributes;o.state=n["media_player.spotify"].state;const s=new z,r=s.diff(e,t(o));r.length>0&&s.apply(e,r)}),e};var te=()=>ee();(async()=>{let e;try{e=await h({hassUrl:"https://biddy.duckdns.org:8123"})}catch(t){if(t!==i)return void alert(`Unknown error: ${t}`);{const t=prompt("What host to connect to?","https://biddy.duckdns.org");e=await h({hassUrl:t})}}y=await function(e){return o(this,void 0,void 0,function(){var t,n;return s(this,function(o){switch(o.label){case 0:return[4,(t=Object.assign({},g,e)).createSocket(t)];case 1:return n=o.sent(),[2,new a(n,t)]}})})}({auth:e})})().then(e=>document.body.appendChild(te()))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,