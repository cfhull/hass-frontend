!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=11)}([function(e,t,n){var r=n(5);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<e.length;o++){var s=e[o];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),c=null,u=0,l=[],d=n(7);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(y(r.parts[s],t))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(y(r.parts[s],t));i[r.id]={id:r.id,refs:1,parts:a}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],s=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function h(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),l.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertAt.before,n);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=l.indexOf(e);t>=0&&l.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return b(t,e.attrs),h(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var s=u++;n=c||(c=m(t)),r=_.bind(null,n,s,!1),o=_.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,r.push(a)}e&&p(f(e,t),t);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var g,w=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(this&&this[r]||r);else if(Array.isArray(r))e.push(o.apply(this,r));else if("object"===i)for(var s in r)n.call(r,s)&&r[s]&&e.push(this&&this[s]||s)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){var r=n(8);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(1)(!1)).i(n(6),""),t.push([e.i,":root {\n  width: 200px;\n  min-width: 350px;\n}\n\n._1Or3BQ6PavUPUwux06_1Fn {\n  width: 100%;\n}\n\n._3G2h2Fz7UkbZm3wrQPqo_K {\n  margin-bottom: 5px;\n}\n\n._3G2h2Fz7UkbZm3wrQPqo_K div {\n  margin: 5px 0;\n  font-size: 20px;\n}\n\n.LD_Ge4HNf1_JLbt7_BbN {\n  display: flex;\n  align-items: center;\n}\n\n.LD_Ge4HNf1_JLbt7_BbN ._3irU38uJWM5KkOlQfVEt3O {\n  margin-left: 10px;\n}\n\n._1DQCtxXLuupXrKeQYreYv5 {\n  border: 0;\n  background: transparent;\n  box-sizing: border-box;\n  width: 0;\n  height: 50px;\n\n  border-color: transparent transparent transparent var(--color-control);\n  transition: 100ms all ease;\n  cursor: pointer;\n\n  border-style: solid;\n  border-width: 25px 0 25px 40px;\n  filter: drop-shadow(0px 0px 4px var(--color-control));\n}\n\n._1DQCtxXLuupXrKeQYreYv5._1Ygd15sUxVRZfB3dIEg5ph {\n  border-style: double;\n  border-width: 0px 0 0px 40px;\n}\n\n._1DQCtxXLuupXrKeQYreYv5:hover {\n  border-color: transparent transparent transparent var(--color-control-hover);\n  filter: drop-shadow(--shadow-control-hover);\n}\n\n",""]),t.locals={artwork:"_1Or3BQ6PavUPUwux06_1Fn",songInfo:"_3G2h2Fz7UkbZm3wrQPqo_K",controls:"LD_Ge4HNf1_JLbt7_BbN",volume:"_3irU38uJWM5KkOlQfVEt3O",stateToggle:"_1DQCtxXLuupXrKeQYreYv5",playing:"_1Ygd15sUxVRZfB3dIEg5ph"}},function(e,t,n){(t=e.exports=n(1)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Lato);",""]),t.push([e.i,":root {\n  --color-background: #222; \n  --color-background-accent: #333;\n\n  --color-text: #eee;\n\n  --color-control: #249795;\n  --color-control-hover: #6ecaca;\n\n  --shadow-control: 0px 0px 4px var(--color-control);\n  --shadow-control-hover: 0px 0px 8px var(--color-control-hover);\n\n  --box-shadow: 1px 2px 4px #000000;\n}\n\nhtml {\n  height: 100%;\n  background-color: #111;\n\n  color: var(--color-text);\n  font-family: 'Lato', sans-serif;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\ninput[type=range] {\n  -webkit-appearance: none;\n  width: 100%;\n  background: transparent;\n}\n\ninput[type=range]:focus {\n  outline: none;\n}\n\ninput[type=range]::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 10px;\n  cursor: pointer;\n  background: var(--color-control);\n  border-radius: 5px;\n  box-shadow: 0px 0px 4px var(--color-control);\n}\n\ninput[type=range]::-webkit-slider-runnable-track:hover {\n  background: var(--color-control-hover);\n  box-shadow: var(--shadow-control-hover);\n}\n\ninput[type=range]::-webkit-slider-thumb {\n  border: 1px solid #000000;\n  height: 30px;\n  width: 15px;\n  border-radius: 5px;\n  background: var(--color-text);\n  cursor: pointer;\n  -webkit-appearance: none;\n  margin-top: -11px;\n}\n",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(t=e.exports=n(1)(!1)).push([e.i,"._30e2mpvGiiFTHwbZaFsmiJ {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 1em;\n    background-color: var(--color-background);\n    border: 1px solid var(--color-background-accent);\n    box-shadow: var(--box-shadow);\n    padding: 2em;\n    max-width: 500px;\n    min-width: 350px;\n}\n\n\n",""]),t.locals={container:"_30e2mpvGiiFTHwbZaFsmiJ"}},function(e,t,n){var r=n(10);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(2)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(1)(!1)).i(n(6),""),t.push([e.i,"\n",""])},function(e,t,n){"use strict";function r(e,t,n,r){return new(n||(n=Promise))(function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(s,a)}c((r=r.apply(e,t||[])).next())})}function o(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}n.r(t);var i=2,s=4,a=function(){function e(e,t){this.options=t,this.commandId=1,this.commands={},this.eventListeners={},this.closeRequested=!1,this.setSocket(e)}return e.prototype.setSocket=function(e){var t=this,n=this.socket;if(this.socket=e,e.addEventListener("message",function(e){return t._handleMessage(e)}),e.addEventListener("close",function(e){return t._handleClose(e)}),n){var r=this.commands;this.commandId=1,this.commands={},Object.keys(r).forEach(function(e){var n=r[e];"eventCallback"in n&&t.subscribeEvents(n.eventCallback,n.eventType).then(function(e){n.unsubscribe=e,n.resolve()})}),this.fireEvent("ready")}},e.prototype.addEventListener=function(e,t){var n=this.eventListeners[e];n||(n=this.eventListeners[e]=[]),n.push(t)},e.prototype.removeEventListener=function(e,t){var n=this.eventListeners[e];if(n){var r=n.indexOf(t);-1!==r&&n.splice(r,1)}},e.prototype.fireEvent=function(e,t){var n=this;(this.eventListeners[e]||[]).forEach(function(e){return e(n,t)})},e.prototype.close=function(){this.closeRequested=!0,this.socket.close()},e.prototype.subscribeEvents=function(e,t){return r(this,void 0,void 0,function(){var n,i,s=this;return o(this,function(a){switch(a.label){case 0:return n=this._genCmdId(),[4,new Promise(function(a,c){i=s.commands[n]={resolve:a,reject:c,eventCallback:e,eventType:t,unsubscribe:function(){return r(s,void 0,void 0,function(){return o(this,function(e){switch(e.label){case 0:return[4,this.sendMessagePromise((t=n,{type:"unsubscribe_events",subscription:t}))];case 1:return e.sent(),delete this.commands[n],[2]}var t})})}};try{s.sendMessage(function(e){var t={type:"subscribe_events"};return e&&(t.event_type=e),t}(t),n)}catch(e){}})];case 1:return a.sent(),[2,function(){return i.unsubscribe()}]}})})},e.prototype.ping=function(){return this.sendMessagePromise({type:"ping"})},e.prototype.sendMessage=function(e,t){t||(t=this._genCmdId()),e.id=t,this.socket.send(JSON.stringify(e))},e.prototype.sendMessagePromise=function(e){var t=this;return new Promise(function(n,r){var o=t._genCmdId();t.commands[o]={resolve:n,reject:r},t.sendMessage(e,o)})},e.prototype._handleMessage=function(e){var t=JSON.parse(e.data);switch(t.type){case"event":this.commands[t.id].eventCallback(t.event);break;case"result":if(t.id in this.commands){var n=this.commands[t.id];t.success?(n.resolve(t.result),"eventCallback"in n||delete this.commands[t.id]):(n.reject(t.error),delete this.commands[t.id])}break;case"pong":this.commands[t.id].resolve(),delete this.commands[t.id]}},e.prototype._handleClose=function(e){var t=this;if(Object.keys(this.commands).forEach(function(e){var n=t.commands[e];"eventCallback"in n||n.reject({type:"result",success:!1,error:{code:3,message:"Connection lost"}})}),!this.closeRequested){this.fireEvent("disconnected");var n=Object.assign({},this.options,{setupRetry:0}),s=function(e){setTimeout(function(){return r(t,void 0,void 0,function(){var t,r;return o(this,function(o){switch(o.label){case 0:o.label=1;case 1:return o.trys.push([1,3,,4]),[4,n.createSocket(n)];case 2:return t=o.sent(),this.setSocket(t),[3,4];case 3:return(r=o.sent())===i?this.fireEvent("reconnect-error",r):s(e+1),[3,4];case 4:return[2]}})})},1e3*Math.min(e,5))};s(0)}},e.prototype._genCmdId=function(){return++this.commandId},e}(),c=function(){return location.protocol+"//"+location.host+"/"},u=function(e){return 1e3*e+Date.now()};function l(e,t,n){return r(this,void 0,void 0,function(){var r,s,a;return o(this,function(o){switch(o.label){case 0:return(r=new FormData).append("client_id",t),Object.keys(n).forEach(function(e){r.append(e,n[e])}),[4,fetch(e+"/auth/token",{method:"POST",credentials:"same-origin",body:r})];case 1:if(!(s=o.sent()).ok)throw 400===s.status||403===s.status?i:new Error("Unable to fetch tokens");return[4,s.json()];case 2:return(a=o.sent()).hassUrl=e,a.clientId=t,a.expires=u(a.expires_in),[2,a]}})})}var d=function(){function e(e,t){this.data=e,this._saveTokens=t}return Object.defineProperty(e.prototype,"wsUrl",{get:function(){return"ws"+this.data.hassUrl.substr(4)+"/api/websocket"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"accessToken",{get:function(){return this.data.access_token},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"expired",{get:function(){return Date.now()>this.data.expires},enumerable:!0,configurable:!0}),e.prototype.refreshAccessToken=function(){return r(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,l(this.data.hassUrl,this.data.clientId,{grant_type:"refresh_token",refresh_token:this.data.refresh_token})];case 1:return(e=t.sent()).refresh_token=this.data.refresh_token,this.data=e,this._saveTokens&&this._saveTokens(e),[2]}})})},e.prototype.revoke=function(){return r(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return(e=new FormData).append("action","revoke"),e.append("token",this.data.refresh_token),[4,fetch(this.data.hassUrl+"/auth/token",{method:"POST",credentials:"same-origin",body:e})];case 1:return t.sent(),this._saveTokens&&this._saveTokens(null),[2]}})})},e}();function p(e){return void 0===e&&(e={}),r(this,void 0,void 0,function(){var t,n,r,i,a,u,p;return o(this,function(o){switch(o.label){case 0:if(!("auth_callback"in(n=function(e){for(var t={},n=location.search.substr(1).split("&"),r=0;r<n.length;r++){var o=n[r].split("="),i=decodeURIComponent(o[0]),s=o.length>1?decodeURIComponent(o[1]):void 0;t[i]=s}return t}())))return[3,4];r=JSON.parse(atob(n.state)),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,l(r.hassUrl,r.clientId,{code:n.code,grant_type:"authorization_code"})];case 2:return t=o.sent(),e.saveTokens&&e.saveTokens(t),[3,4];case 3:return i=o.sent(),console.log("Unable to fetch access token",i),[3,4];case 4:return t||!e.loadTokens?[3,6]:[4,e.loadTokens()];case 5:t=o.sent(),o.label=6;case 6:if(t)return[2,new d(t,e.saveTokens)];if(void 0===(a=e.hassUrl))throw s;return"/"===a[a.length-1]&&(a=a.substr(0,a.length-1)),u=e.clientId||c(),p=e.redirectUrl||location.protocol+"//"+location.host+location.pathname+location.search,function(e,t,n,r){n+=(n.includes("?")?"&":"?")+"auth_callback=1",document.location.href=function(e,t,n,r){var o=e+"/auth/authorize?response_type=code&client_id="+encodeURIComponent(t)+"&redirect_uri="+encodeURIComponent(n);return r&&(o+="&state="+encodeURIComponent(r)),o}(e,t,n,r)}(a,u,p,function(e){return btoa(JSON.stringify(e))}({hassUrl:a,clientId:u})),[2,new Promise(function(){})]}})})}var f=function(e,t,n,r){if(e[t])return e[t];var o,i=0,s=function(e){var t=[];function n(n,r){e=r?n:Object.assign({},e,n);for(var o=t,i=0;i<o.length;i++)o[i](e)}return{get state(){return e},action:function(t){function r(e){n(e,!1)}return function(){for(var n=[e],o=0;o<arguments.length;o++)n.push(arguments[o]);var i=t.apply(this,n);if(null!=i)return i.then?i.then(r):r(i)}},setState:n,subscribe:function(e){return t.push(e),function(){!function(e){for(var n=[],r=0;r<t.length;r++)t[r]===e?e=null:n.push(t[r]);t=n}(e)}}}}(),a=function(){return n(e).then(function(e){return s.setState(e,!0)})};return e[t]={get state(){return s.state},refresh:a,subscribe:function(t){i||(i++,r&&(o=r(e,s)),e.addEventListener("ready",a),a().catch(function(t){if(e.socket.readyState==e.socket.OPEN)throw t}));var n=s.subscribe(t);return void 0!==s.state&&t(s.state),function(){n(),--i||(o&&o.then(function(e){e()}),e.removeEventListener("ready",a))}}},e[t]},h=function(e){return e.sendMessagePromise({type:"get_states"})},v=function(e,t,n,r){return e.sendMessagePromise(function(e,t,n){var r={type:"call_service",domain:e,service:t};return n&&(r.service_data=n),r}(t,n,r))};function m(e){return r(this,void 0,void 0,function(){var t,n,r,i;return o(this,function(o){switch(o.label){case 0:return[4,h(e)];case 1:for(t=o.sent(),n={},r=0;r<t.length;r++)n[(i=t[r]).entity_id]=i;return[2,n]}})})}var b=function(e,t){return e.subscribeEvents(function(e){return function(e,t){var n,r=e.state;if(void 0!==r){var o=t.data,i=o.entity_id,s=o.new_state;if(s)e.setState(((n={})[s.entity_id]=s,n));else{var a=Object.assign({},r);delete a[i],e.setState(a,!0)}}}(t,e)},"state_changed")},y=function(e,t){return function(e){return f(e,"_ent",m,b)}(e).subscribe(t)},g={setupRetry:0,createSocket:function(e){if(!e.auth)throw s;var t=e.auth,n=t.wsUrl;return new Promise(function(s,a){return function e(s,a,c){var u=this,l=new WebSocket(n),d=!1,p=function(){if(l.removeEventListener("close",p),d)c(i);else if(0!==s){var t=-1===s?-1:s-1;setTimeout(function(){return e(t,a,c)},1e3)}else c(1)},f=function(e){return r(u,void 0,void 0,function(){var e;return o(this,function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),t.expired?[4,t.refreshAccessToken()]:[3,2];case 1:n.sent(),n.label=2;case 2:return l.send(JSON.stringify({type:"auth",access_token:t.accessToken})),[3,4];case 3:return e=n.sent(),d=e===i,l.close(),[3,4];case 4:return[2]}})})},h=function(e){return r(u,void 0,void 0,function(){return o(this,function(t){switch(JSON.parse(e.data).type){case"auth_invalid":d=!0,l.close();break;case"auth_ok":l.removeEventListener("open",f),l.removeEventListener("message",h),l.removeEventListener("close",p),l.removeEventListener("error",p),a(l)}return[2]})})};l.addEventListener("open",f),l.addEventListener("message",h),l.addEventListener("close",p),l.addEventListener("error",p)}(e.setupRetry,s,a)})}};let w;const _=async(e,t)=>k(e).on(e=>"volume_set"===e,()=>v(w,"media_player",e,{entity_id:t.entity_id,volume_level:t.value})).on(e=>"set_media_state"===e,()=>v(w,"media_player",t.service,{entity_id:t.entity_id})).otherwise(e=>{throw"invalid service call: "+e}),x=e=>({on:()=>x(e),otherwise:()=>e}),k=e=>({on:(t,n)=>t(e)?x(n(e)):k(e),otherwise:t=>t(e)}),E={};["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","bgsound","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","command","content","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","element","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","image","img","input","ins","isindex","kbd","keygen","label","legend","li","link","listing","main","map","mark","marquee","math","menu","menuitem","meta","meter","multicol","nav","nextid","nobr","noembed","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","plaintext","pre","progress","q","rb","rbc","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","slot","small","source","spacer","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr","xmp"].forEach(e=>{E[e]=((t,...n)=>{const r=document.createElement(e);return r.props=t,Object.keys(t).forEach(e=>{r[e]=t[e]}),Array.isArray(n)||(n=[n]),n.forEach(e=>r.appendChild(e)),r})});var L=E,O=n(0),U=n.n(O),j=n(3);const C=n.n(j).a.bind(U.a),T=({attributes:{entity_picture:e,media_artist:t,media_album_name:n,media_title:r,volume_level:o}={},entity_id:i,state:s,onVolumeChange:a,onStateChange:c})=>{const{div:u,span:l,img:d,input:p}=L;return u({},l({className:U.a.state}),u({className:U.a.songInfo},d({className:U.a.artwork,src:`https://biddy.duckdns.org${e}`}),u({innerHTML:t}),u({innerHTML:n}),u({innerHTML:r})),u({className:U.a.controls},u({className:C(U.a.stateToggle,{playing:"playing"===s}),onclick:c}),p({className:U.a.volume,type:"range",min:"0",max:"1",step:"0.01",value:o,oninput:a})))};n(9);const S=({entity_id:e,attributes:{volume_level:t,friendly_name:n}={}})=>{const{div:r,input:o}=L;return r({id:e},r({innerHTML:n}),r({},o({type:"range",min:0,max:1,step:.01,value:t,onchange:async t=>{await _("volume_set",{entity_id:e,value:t.currentTarget.value})}})))};function I(e,t,n,r=0){if(n)if(t){if(typeof(o=t)!=typeof(i=n)||"string"==typeof o&&o!==i||o.type!==i.type)e.replaceChild(N(t),e.childNodes[r]);else if(t.nodeType){!function(e,t,n={}){const r=Object.assign({},t,n);Object.keys(r).forEach(r=>{t[r]?n[r]&&t[r]===n[r]||(e[r]=t[r],e.props=t):e[r]=void 0})}(e.childNodes[r],t.props,n.props);const o=t.children.length,i=n.children.length;for(let s=0;s<o||s<i;s++)I(e.childNodes[r],t.children[s],n.children[s],s)}}else e.removeChild(e.childNodes[r]);else e.appendChild(N(t));var o,i}function N(e){const t=document.createElement(e.nodeType);return Object.keys(e.props).forEach(n=>{t[n]=e.props[n]}),t.props=e.props,e.children.map(N).forEach(t.appendChild.bind(t)),t}var M=n(4),R=n.n(M);var P=()=>{let e={},t=[{}],n=r();function r(){const{div:n}=L;return n({className:R.a.container},T(e),...t.map(e=>S(e)))}return(e=>y(w,t=>e(t)))(o=>{(e=o["media_player.spotify"]).onVolumeChange=(async e=>{_("volume_set",{value:e.currentTarget.value,entity_id:"media_player.spotify"})}),e.onStateChange=(async e=>{const t=await(e=>h(w).then(t=>t.find(t=>t.entity_id===e)))("media_player.spotify");_("set_media_state",{service:"playing"===t.state?"media_pause":"media_play"})}),t=Object.keys(o).filter(e=>e.startsWith("media_player.snapcast_client_")).reduce((e,t)=>(e.push(o[t]),e),[]).filter(e=>"off"!==e.state),I(n.parentElement,r(),n)}),n};(async()=>{let e;try{e=await p({hassUrl:"https://biddy.duckdns.org:8123"})}catch(t){if(t!==s)return void alert(`Unknown error: ${t}`);{const t=prompt("What host to connect to?","https://biddy.duckdns.org");e=await p({hassUrl:t})}}w=await function(e){return r(this,void 0,void 0,function(){var t,n;return o(this,function(r){switch(r.label){case 0:return[4,(t=Object.assign({},g,e)).createSocket(t)];case 1:return n=r.sent(),[2,new a(n,t)]}})})}({auth:e})})().then(e=>document.getElementById("app-root").appendChild(P()))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,